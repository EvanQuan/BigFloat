using System;
using System.Linq;
using System.Text;
using System.Numerics;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo(assemblyName: "BigFloatingPoint.UnitTests")]
namespace BigFloatingPoint.Implementations
{
    /// <summary>
    /// Represents an arbitrarily large signed floating point number.
    /// </summary>
    [Serializable]
    public readonly struct BigFloat :
        IComparable,
        IComparable<BigFloat>,
        IEquatable<BigFloat>
    {
        #region Fields

        /// <summary>
        /// Numerator
        /// </summary>
        private readonly BigInteger numerator;

        /// <summary>
        /// Denominator
        /// </summary>
        private readonly BigInteger denominator;

        /// <summary>
        /// <see cref="string"/> representation of <see cref="Sign"/>.
        /// </summary>
        private string SignString => Sign < 0 ? "-" : "";

        /// <summary>
        /// Specifies whether this <see cref="BigFloat"/> object is simplified;
        /// that is, the numerator and denominators in the fractional form are
        /// reduced to the lowest possible value.
        /// </summary>
        public bool Simplified { get; }

        #endregion

        #region Constants

        /// <summary>
        /// Gets a value that represents the number one (1).
        /// </summary>
        public static BigFloat One { get; } = new BigFloat(1);

        /// <summary>
        /// Gets a value that represents the number 0 (zero).
        /// </summary>
        public static BigFloat Zero { get; } = new BigFloat(0);

        /// <summary>
        /// Gets a value that represents the number negative one (-1).
        /// </summary>
        public static BigFloat MinusOne { get; } = new BigFloat(-1);

        /// <summary>
        /// Gets a value that represents the number one half (1/2).
        /// </summary>
        public static BigFloat OneHalf { get; } = new BigFloat(1, 2);

        /// <summary>
        /// 10 000 digits of Archimedes' constant, pi.
        /// </summary>
        public static BigFloat ArchemedesConstant { get; } = new BigFloat(Pi);

        private const string Pi = "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361603563707660104710181942955596198946767837449448255379774726847104047534646208046684259069491293313677028989152104752162056966024058038150193511253382430035587640247496473263914199272604269922796782354781636009341721641219924586315030286182974555706749838505494588586926995690927210797509302955321165344987202755960236480665499119881834797753566369807426542527862551818417574672890977772793800081647060016145249192173217214772350141441973568548161361157352552133475741849468438523323907394143334547762416862518983569485562099219222184272550254256887671790494601653466804988627232791786085784383827967976681454100953883786360950680064225125205117392984896084128488626945604241965285022210661186306744278622039194945047123713786960956364371917287467764657573962413890865832645995813390478027590099465764078951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659250937221696461515709858387410597885959772975498930161753928468138268683868942774155991855925245953959431049972524680845987273644695848653836736222626099124608051243884390451244136549762780797715691435997700129616089441694868555848406353422072225828488648158456028506016842739452267467678895252138522549954666727823986456596116354886230577456498035593634568174324112515076069479451096596094025228879710893145669136867228748940560101503308617928680920874760917824938589009714909675985261365549781893129784821682998948722658804857564014270477555132379641451523746234364542858444795265867821051141354735739523113427166102135969536231442952484937187110145765403590279934403742007310578539062198387447808478489683321445713868751943506430218453191048481005370614680674919278191197939952061419663428754440643745123718192179998391015919561814675142691239748940907186494231961567945208095146550225231603881930142093762137855956638937787083039069792077346722182562599661501421503068038447734549202605414665925201497442850732518666002132434088190710486331734649651453905796268561005508106658796998163574736384052571459102897064140110971206280439039759515677157700420337869936007230558763176359421873125147120532928191826186125867321579198414848829164470609575270695722091756711672291098169091528017350671274858322287183520935396572512108357915136988209144421006751033467110314126711136990865851639831501970165151168517143765761835155650884909989859982387345528331635507647918535893226185489632132933089857064204675259070915481416549859461637180270981994309924488957571282890592323326097299712084433573265489382391193259746366730583604142813883032038249037589852437441702913276561809377344403070746921120191302033038019762110110044929321516084244485963766983895228684783123552658213144957685726243344189303968642624341077322697802807318915441101044682325271620105265227211166039666557309254711055785376346682065310989652691862056476931257058635662018558100729360659876486117910453348850346113657686753249441668039626579787718556084552965412665408530614344431858676975145661406800700237877659134401712749470420562230538994561314071127000407854733269939081454664645880797270826683063432858785698305235808933065757406795457163775254202114955761581400250126228594130216471550979259230990796547376125517656751357517829666454779174501129961489030463994713296210734043751895735961458901938971311179042978285647503203198691514028708085990480109412147221317947647772622414254854540332157185306142288137585043063321751829798662237172159160771669254748738986654949450114654062843366393790039769265672146385306736096571209180763832716641627488880078692560290228472104031721186082041900042296617119637792133757511495950156604963186294726547364252308177036751590673502350728354056704038674351362222477158915049530984448933309634087807693259939780541934144737744184263129860809988868741326047215695162396586457302163159819319516735381297416772947867242292465436680098067692823828068996400482435403701416314965897940924323789690706977942236250822168895738379862300159377647165122893578601588161755782973523344604281512627203734314653197777416031990665541876397929334419521541341899485444734567383162499341913181480927777103863877343177207545654532207770921201905166096280490926360197598828161332316663652861932668633606273567630354477628035045077723554710585954870279081435624014517180624643626794561275318134078330336254232783944975382437205835311477119926063813346776879695970309833913077109870408591337464144282277263465947047458784778720192771528073176790770715721344473060570073349243693113835049316312840425121925651798069411352801314701304781643788518529092854520116583934196562134914341595625865865570552690496520985803385072242648293972858478316305777756068887644624824685792603953527734803048029005876075825104747091643961362676044925627420420832085661190625454337213153595845068772460290161876679524061634252257719542916299193064553779914037340432875262888963995879475729174642635745525407909145135711136941091193932519107602082520261879853188770584297259167781314969900901921169717372784768472686084900337702424291651300500516832336435038951702989392233451722013812806965011784408745196012122859937162313017114448464090389064495444006198690754851602632750529834918740786680881833851022833450850486082503930213321971551843063545500766828294930413776552793975175461395398468339363830474611996653858153842056853386218672523340283087112328278921250771262946322956398989893582116745627010218356462201349671518819097303811980049734072396103685406643193950979019069963955245300545058068550195673022921913933918568034490398205955100226353536192041994745538593810234395544959778377902374216172711172364343543947822181852862408514006660443325888569867054315470696574745855033232334210730154594051655379068662733379958511562578432298827372319898757141595781119635833005940873068121602876496286744604774649159950549737425626901049037781986835938146574126804925648798556145372347867330390468838343634655379498641927056387293174872332083760112302991136793862708943879936201629515413371424892830722012690147546684765357616477379467520049075715552781965362132392640616013635815590742202020318727760527721900556148425551879253034351398442532234157623361064250639049750086562710953591946589751413103482276930624743536325691607815478181152843667957061108615331504452127473924544945423682886061340841486377670096120715124914043027253860764823634143346235189757664521641376796903149501910857598442391986291642193994907236234646844117394032659184044378051333894525742399508296591228508555821572503107125701266830240292952522011872676756220415420516184163484756516999811614101002996078386909291603028840026910414079288621507842451670908700069928212066041837180653556725253256753286129104248776182582976515795984703562226293486003415872298053498965022629174878820273420922224533985626476691490556284250391275771028402799806636582548892648802545661017296702664076559042909945681506526530537182941270336931378517860904070866711496558343434769338578171138645587367812301458768712660348913909562009939361031029161615288138437909904231747336394804575931493140529763475748119356709110137751721008031559024853090669203767192203322909433467685142214477379393751703443661991040337511173547191855046449026365512816228824462575916333039107225383742182140883508657391771509682887478265699599574490661758344137522397096834080053559849175417381883999446974867626551658276584835884531427756879002909517028352971634456212964043523117600665101241200659755851276178583829204197484423608007193045761893234922927965019875187212726750798125547095890455635792122103334669749923563025494780249011419521238281530911407907386025152274299581807247162591668545133312394804947079119153267343028244186041426363954800044800267049624820179289647669758318327131425170296923488962766844032326092752496035799646925650493681836090032380929345958897069536534940603402166544375589004563288225054525564056448246515187547119621844396582533754388569094113031509526179378002974120766514793942590298969594699556576121865619673378623625612521632086286922210327488921865436480229678070576561514463204692790682120738837781423356282360896320806822246801224826117718589638140918390367367222088832151375560037279839400415297002878307667094447456013455641725437090697939612257142989467154357846878861444581231459357198492252847160504922124247014121478057345510500801908699603302763478708108175450119307141223390866393833952942578690507643100638351983438934159613185434754649556978103829309716465143840700707360411237359984345225161050702705623526601276484830840761183013052793205427462865403603674532865105706587488225698157936789766974220575059683440869735020141020672358502007245225632651341055924019027421624843914035998953539459094407046912091409387001264560016237428802109276457931065792295524988727584610126483699989225695968815920560010165525637567";

        /// <summary>
        /// 10 000 digits of Euler's number, e.
        /// </summary>
        public static BigFloat EulersNumber { get; } = new BigFloat(E);

        private const string E = "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910259686200235371858874856965220005031173439207321139080329363447972735595527734907178379342163701205005451326383544000186323991490705479778056697853358048966906295119432473099587655236812859041383241160722602998330535370876138939639177957454016137223618789365260538155841587186925538606164779834025435128439612946035291332594279490433729908573158029095863138268329147711639633709240031689458636060645845925126994655724839186564209752685082307544254599376917041977780085362730941710163434907696423722294352366125572508814779223151974778060569672538017180776360346245927877846585065605078084421152969752189087401966090665180351650179250461950136658543663271254963990854914420001457476081930221206602433009641270489439039717719518069908699860663658323227870937650226014929101151717763594460202324930028040186772391028809786660565118326004368850881715723866984224220102495055188169480322100251542649463981287367765892768816359831247788652014117411091360116499507662907794364600585194199856016264790761532103872755712699251827568798930276176114616254935649590379804583818232336861201624373656984670378585330527583333793990752166069238053369887956513728559388349989470741618155012539706464817194670834819721448889879067650379590366967249499254527903372963616265897603949857674139735944102374432970935547798262961459144293645142861715858733974679189757121195618738578364475844842355558105002561149239151889309946342841393608038309166281881150371528496705974162562823609216807515017772538740256425347087908913729172282861151591568372524163077225440633787593105982676094420326192428531701878177296023541306067213604600038966109364709514141718577701418060644363681546444005331608778314317444081194942297559931401188868331483280270655383300469329011574414756313999722170380461709289457909627166226074071874997535921275608441473782330327033016823719364800217328573493594756433412994302485023573221459784328264142168487872167336701061509424345698440187331281010794512722373788612605816566805371439612788873252737389039289050686532413806279602593038772769778379286840932536588073398845721874602100531148335132385004782716937621800490479559795929059165547050577751430817511269898518840871856402603530558373783242292418562564425502267215598027401261797192804713960068916382866527700975276706977703643926022437284184088325184877047263844037953016690546593746161932384036389313136432713768884102681121989127522305625675625470172508634976536728860596675274086862740791285657699631378975303466061666980421826772456053066077389962421834085988207186468262321508028828635974683965435885668550377313129658797581050121491620765676995065971534476347032085321560367482860837865680307306265763346977429563464371670939719306087696349532884683361303882943104080029687386911706666614680001512114344225602387447432525076938707777519329994213727721125884360871583483562696166198057252661220679754062106208064988291845439530152998209250300549825704339055357016865312052649561485724925738620691740369521353373253166634546658859728665945113644137033139367211856955395210845840724432383558606310680696492485123263269951460359603729725319836842336390463213671011619282171115028280160448805880238203198149309636959673583274202498824568494127386056649135252670604623445054922758115170931492187959271800194096886698683703730220047531433818109270803001720593553052070070607223399946399057131158709963577735902719628506114651483752620956534671329002599439766311454590268589897911583709341937044115512192011716488056694593813118384376562062784631049034629395002945834116482411496975832601180073169943739350696629571241027323913874175492307186245454322203955273529524024590380574450289224688628533654221381572213116328811205214648980518009202471939171055539011394331668151582884368760696110250517100739276238555338627255353883096067164466237092264680967125406186950214317621166814009759528149390722260111268115310838731761732323526360583817315103459573653822353499293582283685100781088463434998351840445170427018938199424341009057537625776757111809008816418331920196262341628816652137471732547772778348877436651882875215668571950637193656539038944936642176400312152787022236646363575550356557694888654950027085392361710550213114741374410613444554419210133617299628569489919336918472947858072915608851039678195942983318648075608367955149663644896559294818785178403877332624705194505041984774201418394773120281588684570729054405751060128525805659470304683634459265255213700806875200959345360731622611872817392807462309468536782310609792159936001994623799343421068781349734695924646975250624695861690917857397659519939299399556754271465491045686070209901260681870498417807917392407194599632306025470790177452751318680998228473086076653686685551646770291133682756310722334672611370549079536583453863719623585631261838715677411873852772292259474337378569553845624680101390572787101651296663676445187246565373040244368414081448873295784734849000301947788802046032466084287535184836495919508288832320652212810419044804724794929134228495197002260131043006241071797150279343326340799596053144605323048852897291765987601666781193793237245385720960758227717848336161358261289622611812945592746276713779448758675365754486140761193112595851265575973457301533364263076798544338576171533346232527057200530398828949903425956623297578248873502925916682589445689465599265845476269452878051650172067478541788798227680653665064191097343452887833862172615626958265447820567298775642632532159429441803994321700009054265076309558846589517170914760743713689331946909098190450129030709956622662030318264936573369841955577696378762491885286568660760056602560544571133728684020557441603083705231224258722343885412317948138855007568938112493538631863528708379984569261998179452336408742959118074745341955142035172618420084550917084568236820089773945584267921427347756087964427920270831215015640634134161716644806981548376449157390012121704154787259199894382536495051477137939914720521952907939613762110723849429061635760459623125350606853765142311534966568371511660422079639446662116325515772907097847315627827759878813649195125748332879377157145909106484164267830994972367442017586226940215940792448054125536043131799269673915754241929660731239376354213923061787675395871143610408940996608947141834069836299367536262154524729846421375289107988438130609555262272083751862983706678722443019579379378607210725427728907173285487437435578196651171661833088112912024520404868220007234403502544820283425418788465360259150644527165770004452109773558589762265548494162171498953238342160011406295071849042778925855274303522139683567901807640604213830730877446017084268827226117718084266433365178000217190344923426426629226145600433738386833555534345300426481847398921562708609565062934040526494324426144566592129122564889356965500915430642613425266847259491431423939884543248632746184284665598533231221046625989014171210344608427161661900125719587079321756969854401339762209674945418540711844643394699016269835160784892451405894094639526780735457970030705116368251948770118976400282764841416058720618418529718915401968825328930914966534575357142731848201638464483249903788606900807270932767312758196656394114896171683298045513972950668760474091542042842999354102582911350224169076943166857424252250902693903481485645130306992519959043638402842926741257342244776558417788617173726546208549829449894678735092958165263207225899236876845701782303809656788311228930580914057261086588484587310165815116753332767488701482916741970151255978257270740643180860142814902414678047232759768426963393577354293018673943971638861176420900406866339885684168100387238921448317607011668450388721236436704331409115573328018297798873659091665961240202177855885487617616198937079438005666336488436508914480557103976521469602766258359905198704230017946553679";

        /// <summary>
        /// 10 000 digits of the Golden Ratio, phi.
        /// </summary>
        public static BigFloat GoldenRatio { get; } = new BigFloat(Phi);

        private const string Phi = "1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959395829056383226613199282902678806752087668925017116962070322210432162695486262963136144381497587012203408058879544547492461856953648644492410443207713449470495658467885098743394422125448770664780915884607499887124007652170575179788341662562494075890697040002812104276217711177780531531714101170466659914669798731761356006708748071013179523689427521948435305678300228785699782977834784587822891109762500302696156170025046433824377648610283831268330372429267526311653392473167111211588186385133162038400522216579128667529465490681131715993432359734949850904094762132229810172610705961164562990981629055520852479035240602017279974717534277759277862561943208275051312181562855122248093947123414517022373580577278616008688382952304592647878017889921990270776903895321968198615143780314997411069260886742962267575605231727775203536139362107673893764556060605921658946675955190040055590895022953094231248235521221241544400647034056573479766397239494994658457887303962309037503399385621024236902513868041457799569812244574717803417312645322041639723213404444948730231541767689375210306873788034417009395440962795589867872320951242689355730970450959568440175551988192180206405290551893494759260073485228210108819464454422231889131929468962200230144377026992300780308526118075451928877050210968424936271359251876077788466583615023891349333312231053392321362431926372891067050339928226526355620902979864247275977256550861548754357482647181414512700060238901620777322449943530889990950168032811219432048196438767586331479857191139781539780747615077221175082694586393204565209896985556781410696837288405874610337810544439094368358358138113116899385557697548414914453415091295407005019477548616307542264172939468036731980586183391832859913039607201445595044977921207612478564591616083705949878600697018940988640076443617093341727091914336501371576601148038143062623805143211734815100559013456101180079050638142152709308588092875703450507808145458819906336129827981411745339273120809289727922213298064294687824274874017450554067787570832373109759151177629784432847479081765180977872684161176325038612112914368343767023503711163307258698832587103363222381098090121101989917684149175123313401527338438372345009347860497929459915822012581045982309255287212413704361491020547185549611808764265765110605458814756044317847985845397312863016254487611485202170644041116607669505977578325703951108782308271064789390211156910392768384538633332156582965977310343603232254574363720412440640888267375843395367959312322134373209957498894699565647360072959998391288103197426312517971414320123112795518947781726914158911779919564812558001845506563295285985910009086218029775637892599916499464281930222935523466747593269516542140210913630181947227078901220872873617073486499981562554728113734798716569527489008144384053274837813782466917444229634914708157007352545707089772675469343822619546861533120953357923801460927351021011919021836067509730895752895774681422954339438549315533963038072916917584610146099505506480367930414723657203986007355076090231731250161320484358364817704848181099160244252327167219018933459637860878752870173935930301335901123710239171265904702634940283076687674363865132710628032317406931733448234356453185058135310854973335075996677871244905836367541328908624063245639535721252426117027802865604323494283730172557440583727826799603173936401328762770124367983114464369476705312724924104716700138247831286565064934341803900410178053395058772458665575522939158239708417729833728231152569260929959422400005606266786743579239724540848176519734362652689448885527202747787473359835367277614075917120513269344837529916499809360246178442675727767900191919070380522046123248239132610432719168451230602362789354543246176997575368904176365025478513824631465833638337602357789926729886321618583959036399818384582764491245980937043055559613797343261348304949496868108953569634828178128862536460842033946538194419457142666823718394918323709085748502665680398974406621053603064002608171126659954199368731609457228881092077882277203636684481532561728411769097926666552238468831137185299192163190520156863122282071559987646842355205928537175780765605036773130975191223973887224682580571597445740484298780735221598426676625780770620194304005425501583125030175340941171910192989038447250332988024501436796844169479595453045910313811621870456799786636617460595700034459701135251813460065655352034788811741499412748264152135567763940390710387088182338068033500380468001748082205910968442026446402187705340100318028816644153091393948156403192822785482414510503188825189970074862287942155895742820216657062188090578088050324676991297287210387073697406435667458920258656573978560859566534107035997832044633634648548949766388535104552729824229069984885369682804645974576265143435905093832124374333387051665714900590710567024887985804371815126100440381488040725244061642902247822715272411208506578883871249363510680636516674322232776775579739927037623191470473239551206070550399208844260370879084333426183841359707816482955371432196118950379771463000755597537957035522714493191321725564401283091805045008992187051211860693357315389593507903007367270233141653204234015537414426871540551164796114332302485440409406911456139873026039518281680344825254326738575900560432024537271929124864581333441698529939135747869895798643949802304711696715736228391201812731291658995275991922031837235682727938563733126547998591246327503006059256745497943508811929505685493259355318729141801136412187470752628106869830135760524719445593219553596104528303148839117693011965858343144248948985655842508341094295027719758335224429125736493807541711373924376014350682987849327129975122868819604983577515877178041069713196675347719479226365190163397712847390793361111914089983056033610609871717830554354035608952929081846414371392943781356048203894791257450770755751030024207266290018090422934249425906066614133228722698069014599451199547801639915141261252572828066433126165746938819510644216738718000110042184830258091654338374923641183888564685143150063731904295148146942431460895254707203740556691306922099080481945297511065046428105417755259095187131888359147659960413179602094153085855332387725380232727632977372143127968216716234421183201802881412747443168847218459392781435474099999072233203059262976611238327983316988253931262006503702884478286669404473079471047612558658375298623625099982323359715507233838332440815257781933642626304330265895817080045127887311593558774721725649470005163667257715392098409503274511215368730091219962952276591316370939686072713426926231547533043799331658110736964314217197943405639155121081081362626888569748068060116918941750272298741586991791453499462444194012197858601373660828690722365147713912687420966513787562059185432888834174292090156313328319357562208971376563097850156315498245644586542479293572282875060848145335135218172958793299117100324762220521946451053624505129884308713444395072442673514628617991832336459836963763272257569159723954383052086647474238151107927349483695239647926899369832491799950278950006045966131346336302494995148080532901790297518251587504900743518798351183603272277260171740453557165885557829729106195819351710554825793070910057635869901929721799516873117556314448564810022001425454055429273458837116020994794572082378043687189448056368918258024449963187834202749101533579107273362532890693347412380222201162627711930854485029541913200400999865566651775664095365619789781838045103035651013158945890287186108690589394713680148457001836649564720329433437429894642741255143590584348409195487015236140317391390361644019845505104912116979200120199960506994966403035086369290394100701945053201623487276323273244943963048089055425137972331475185207091025063685981679530481810073942453170023880475983432345041425843140636127210960228242337822809027976596077710849391517488731687771352239009117117350918600654620099024975852779254278165970383495058010626155333691093784659771052975022317307412177834418941184596586102980187787427445638669661277245038458605264151030408982577775447411533207640758816775149755380471162966777100587664615954967769270549623939857092550702740699781408431249653630718665337180605874224259816530705257383454157705429216299811491750861131176577317209561565647869547448927132060806354577946241453106698374211379816896382353330447788316933972872891810366408326985698825443851667586228993069643468489751484087903964760420361020602171739447026348763365439319522907738361673898117812424836557810503416945156362604300366574310847665487778012857792364541852244723617137422925584159313561286637167032807217155339264632573067306391085410886808574283858828060230334140855039097353872613451196292641599521278931135443146015273090255382710432596622674390374556361228613907831943357059003814870089866131539819585744233044197085669672229314273074138488278897558886079973870447020316683485694199096548029824931981765792682985562972301068277723516274078380743187782731821191969528005160879157212882633796823127256287000150018292975772999357909491964076344286157571354442789838304045470271019458004258202120234458063034503365814721854920367998997293535391968121331951653797453991114942444518303385884129040181781882137600665928494136775431745160540938711036871521164040582193447120448277596054169486453987832626954801391501903899593130670318661670663719640256928671388714663118919268568269199527645799771827875946096161721886810945465157886912241060981419726861925547878992631535947292282508054251690681401078179602188533076230556381631640192245450325765673925997651753080142716071430871886285983603746505713420467008343275423027704779331118366690323288530687387990713590074030490745988951364768760867844323824821893061757031956380323081971936356727419643872625870615433072963703812751517040600505759488272385634515639052657710426459476040556950959840888903762079956638801786185591594411172509231327977113803";

        /// <summary>
        /// 104 digits of Wallis's Constant, W.
        /// </summary>
        public static BigFloat WallissConstant { get; } = new BigFloat(W);

        private const string W = "2.09455148154232659148238654057930296385730610562823918030412852904531218998348366714626728177715775786083";

        /// <summary>
        /// Represents the largest possible value of an <see cref="int"/>.
        /// </summary>
        public static BigFloat MaxInt { get; } = new BigFloat(int.MaxValue);

        /// <summary>
        /// Represents the smallest possible value of an <see cref="int"/>.
        /// </summary>
        public static BigFloat MinInt { get; } = new BigFloat(int.MinValue);

        /// <summary>
        /// Represents the largest possible value of an <see cref="long"/>.
        /// </summary>
        public static BigFloat MaxLong { get; } = new BigFloat(long.MaxValue);

        /// <summary>
        /// Represents the smallest possible value of an <see cref="long"/>.
        /// </summary>
        public static BigFloat MinLong { get; } = new BigFloat(long.MinValue);

        /// <summary>
        /// Represents the largest possible value of an <see cref="double"/>.
        /// </summary>
        public static BigFloat MaxDouble { get; } = new BigFloat(double.MaxValue);

        /// <summary>
        /// Represents the smallest possible value of an <see cref="double"/>.
        /// </summary>
        public static BigFloat MinDouble { get; } = new BigFloat(double.MinValue);

        /// <summary>
        /// Represents the largest possible value of an <see cref="float"/>.
        /// </summary>
        public static BigFloat MaxFloat { get; } = new BigFloat(float.MaxValue);

        /// <summary>
        /// Represents the smallest possible value of an <see cref="float"/>.
        /// </summary>
        public static BigFloat MinFloat { get; } = new BigFloat(float.MinValue);

        /// <summary>
        /// Positive sign
        /// </summary>
        public const int PositiveSign = 1;

        /// <summary>
        /// Negative sign
        /// </summary>
        public const int NegativeSign = -1;

        /// <summary>
        /// Neutral sign (zero)
        /// </summary>
        public const int NeutralSign = 0;

        /// <summary>
        /// Default <see cref="ToString"/> precision.
        /// </summary>
        public const int DefaultPrecision = 100;

        private const string DenominatorIsZeroExceptionMessage
            = "Denominator cannot be 0.";

        #endregion

        #region Properties

        /// <summary>
        /// Gets a number that indicates the sign (<see cref="PositiveSign"/>,
        /// <see cref="NegativeSign"/>, or <see cref="NeutralSign"/>) of the
        /// current <see cref="BigFloat"/> object.
        /// </summary>
        public int Sign
        {
            get
            {
                switch(numerator.Sign + denominator.Sign) {
                    case 2: case -2:
                        return PositiveSign;
                    case 0:
                        return NegativeSign;
                    default:
                        return NeutralSign;
                }
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Initialize a new object of the <see cref="BigFloat"/> structure
        /// with the <see cref="string"/> representation of a number.
        /// </summary>
        /// <param name="value">A <see cref="string"/> object.</param>
        public BigFloat(string value)
        {
            BigFloat bf = Parse(value);
            this.numerator = bf.numerator;
            this.denominator = bf.denominator;
            this.Simplified = denominator.IsOne;
        }

        /// <summary>
        /// Initialize a new object of the <see cref="BigFloat"/> structure
        /// as a fraction with a <see cref="BigInteger"/> numerator and
        /// denominator.
        /// </summary>
        /// <param name="numerator">
        /// A <see cref="BigInteger"/> object as the numerator.
        /// </param>
        /// <param name="denominator">
        /// A <see cref="BigInteger"/> object as the denominator.
        /// </param>
        public BigFloat(BigInteger numerator, BigInteger denominator)
        {
            if (denominator.IsZero)
            {
                throw new ArgumentException(DenominatorIsZeroExceptionMessage);
            }

            // Directly set the numerator and denominator without
            // simplification.
            this.numerator = numerator;
            this.denominator = denominator;

            // At minimum, if the denominator is positive one, the fraction is
            // already simplified. While it is possible for fractions with
            // non-one denominator fractions to be simplified, this is the
            // easiest check to do without having to simplify.
            this.Simplified = denominator.IsOne;
        }

        private BigFloat(
            BigInteger numerator,
            BigInteger denominator,
            bool simplified)
        {
            if (denominator.IsZero)
            {
                throw new ArgumentException(DenominatorIsZeroExceptionMessage);
            }

            this.numerator = numerator;
            this.denominator = BigInteger.Abs(denominator);
            this.Simplified = simplified;
        }

        /// <summary>
        /// Initialize a new object of the <see cref="BigFloat"/> structure
        /// with a <see cref="BigInteger"/> object.
        /// </summary>
        /// <param name="value">A <see cref="BigInteger"/> object.</param>
        public BigFloat(BigInteger value)
        {
            this.numerator = value;
            this.denominator = BigInteger.One;
            this.Simplified = denominator.IsOne;
        }


        /// <summary>
        /// Initilize a new object of the <see cref="BigFloat"/> structure
        /// with a <see cref="BigFloat"/> object.
        /// </summary>
        /// <param name="value">A <see cref="BigFloat"/> object.</param>
        public BigFloat(BigFloat value)
        {
            this.numerator = value.numerator;
            this.denominator = value.denominator;
            this.Simplified = value.Simplified;
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// with an unsigned 64-bit integer value.
        /// </summary>
        /// <param name="value">A 64-bit unsigned integer value.</param>
        public BigFloat(ulong value)
        {
            this.numerator = new BigInteger(value);
            this.denominator = BigInteger.One;
            this.Simplified = denominator.IsOne;
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// using a 64-bit signed integer value.
        /// </summary>
        /// <param name="value">A 64-bit signed integer.</param>
        public BigFloat(long value)
        {
            this.numerator = new BigInteger(value);
            this.denominator = BigInteger.One;
            this.Simplified = denominator.IsOne;
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// using a 32-bit unsigned integer value.
        /// </summary>
        /// <param name="value">A 32-bit unsigned integer.</param>
        public BigFloat(uint value)
        {
            this.numerator = new BigInteger(value);
            this.denominator = BigInteger.One;
            this.Simplified = denominator.IsOne;
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// using a 32-bit signed integer value.
        /// </summary>
        /// <param name="value"></param>
        public BigFloat(int value)
        {
            this.numerator = new BigInteger(value);
            this.denominator = BigInteger.One;
            this.Simplified = denominator.IsOne;
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// using a single-precision floating-point value.
        /// </summary>
        /// <param name="value">A single-precision floating-point value.</param>
        public BigFloat(float value) : this(value.ToString("N99"))
        {
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// using a double-precision floating-point value.
        /// </summary>
        /// <param name="value">A double-precision floating-point value.</param>
        public BigFloat(double value) : this(value.ToString("N99")) 
        { 
        }

        /// <summary>
        /// Initializes a new object of the <see cref="BigFloat"/> structure
        /// using a <see cref="System.Decimal"/> value.
        /// </summary>
        /// <param name="value">A decimal number.</param>
        public BigFloat(decimal value) : this(value.ToString("N99"))
        {
        }

        #endregion

        #region Instance Methods

        /// <summary>
        /// Adds the value of <paramref name="addend"/> to this one.
        /// </summary>
        /// <param name="addend">The value to add to this.</param>
        /// <returns>The sum of <paramref name="addend"/> and this.</returns>
        public BigFloat Add(BigFloat addend)
        {
            return new BigFloat(
                numerator: this.numerator * addend.denominator
                    + addend.numerator * this.denominator,
                denominator: this.denominator * addend.denominator);
        }

        /// <summary>
        /// Subtracts <paramref name="subtrahend"/> from this one.
        /// </summary>
        /// <param name="subtrahend">The value to subtract from this.</param>
        /// <returns>
        /// The difference between this and <paramref name="subtrahend"/>.
        /// </returns>
        public BigFloat Subtract(BigFloat subtrahend)
        {
            return new BigFloat(
                numerator: this.numerator * subtrahend.denominator
                    - subtrahend.numerator * this.denominator,
                denominator: this.denominator * subtrahend.denominator);
        }

        /// <summary>
        /// Multiplies this value by <paramref name="multiplier"/>.
        /// </summary>
        /// <param name="multiplier">The value to multiply with this.</param>
        /// <returns>
        /// The product of <paramref name="multiplier"/> and this.
        /// </returns>
        public BigFloat Multiply(BigFloat multiplier)
        {
            return new BigFloat(
                numerator: this.numerator * multiplier.numerator,
                denominator: this.denominator * multiplier.denominator);
        }

        /// <summary>
        /// Divides this value by <paramref name="divisor"/>.
        /// </summary>
        /// <param name="divisor">The value to divide by.</param>
        /// <returns>
        /// The quotient of <paramref name="divisor"/> and this.
        /// </returns>
        public BigFloat Divide(BigFloat divisor)
        {
            if (divisor.numerator == 0)
            {
                throw new System.DivideByZeroException("other");
            }

            return new BigFloat(
                numerator: this.numerator * divisor.denominator,
                denominator: this.denominator * divisor.numerator);
        }

        /// <summary>
        /// Performs integer division on this <see cref="BigFloat"/> object by
        /// <paramref name="divisor"/> and returns the remainder.
        /// </summary>
        /// <param name="divisor">The value to divide by.</param>
        /// <returns>
        /// The remainder after dividing this by <paramref name="divisor"/>.
        /// </returns>
        public BigFloat Remainder(BigFloat divisor)
        {
            //b = a mod n
            //remainder = a - floor(a/n) * n

            return this - Floor(this / divisor) * divisor;
        }

        /// <summary>
        /// Performs integer division on this value by
        /// <paramref name="divisor"/> and returns the quotient and remainder.
        /// </summary>
        /// <param name="divisor">The value to divide by.</param>
        /// <param name="remainder">The remainder.</param>
        /// <returns>
        /// The quotient after dividing this by <paramref name="divisor"/>.
        /// </returns>
        public BigFloat DivideRemainder(
            BigFloat divisor,
            out BigFloat remainder)
        {
            BigFloat quotient = this.Divide(divisor);

            remainder = quotient.Remainder(divisor);

            return quotient;
        }

        /// <summary>
        /// Raise the value of this <see cref="BigFloat"/> object to the
        /// power of <paramref name="exponent"/>.
        /// </summary>
        /// <param name="exponent">
        /// The exponent to raise this object's value by.
        /// </param>
        /// <returns>
        /// The result of raising this object by the power of
        /// <paramref name="exponent"/>.
        /// </returns>
        public BigFloat PowerTo(int exponent)
        {
            if (exponent == 0)
            {
                return One;
            }

            if (this.numerator.IsZero)
            {
                return this;
            }


            if (exponent < 0)
            {
                return new BigFloat(
                    numerator: BigInteger.Pow(this.denominator, -exponent),
                    denominator: BigInteger.Pow(this.numerator, -exponent));
            }

            return new BigFloat(
                numerator: BigInteger.Pow(this.numerator, exponent),
                denominator: BigInteger.Pow(this.denominator, exponent));
        }

        /// <summary>
        /// Gets the absolute value of this <see cref="BigFloat"/> object.
        /// </summary>
        /// <returns>The absolute value of this.</returns>
        public BigFloat AbsoluteValue()
        {
            return new BigFloat(
                numerator: BigInteger.Abs(this.numerator),
                denominator: this.denominator);
        }

        /// <summary>
        /// Negates the value of this <see cref="BigFloat"/> object.
        /// </summary>
        /// <returns>
        /// The result of this <see cref="BigFloat"/> object multiplied by
        /// negative one (-1).
        /// </returns>
        public BigFloat Negate()
        {
            return new BigFloat(
                numerator: BigInteger.Negate(this.numerator),
                denominator: this.denominator);
        }

        /// <summary>
        /// Switches the numerator and denominator of this <see
        /// cref="BigFloat"/> object.
        /// </summary>
        /// <returns>The result of inverting this object.</returns>
        public BigFloat Inverse()
        {
            return new BigFloat(
                numerator: this.denominator,
                denominator: this.numerator);
        }

        /// <summary>
        /// Increments the value of this <see cref="BigFloat"/> object by 1.
        /// </summary>
        /// <returns>
        /// The value of this <see cref="BigFloat"/> object incremented by 1.
        /// </returns>
        public BigFloat Increment()
        {
            return new BigFloat(
                numerator: this.numerator + this.denominator,
                denominator: this.denominator);
        }

        /// <summary>
        /// Decrements the value of this <see cref="BigFloat"/> object by 1.
        /// </summary>
        /// <returns>
        /// The value of this <see cref="BigFloat"/> object decremented by 1.
        /// </returns>
        public BigFloat Decrement()
        {
            return new BigFloat(
                numerator: this.numerator - this.denominator,
                denominator: this.denominator);
        }

        /// <summary>
        /// Returns the smallest integral value that is greater than or equal
        /// to the value of this <see cref="BigFloat"/> object.
        /// </summary>
        /// <returns>
        /// The smallest integral value that is greater than or equal to this
        /// value. Note that this method returns a <see cref="BigFloat"/>
        /// instead of an integral type.
        /// </returns>
        public BigFloat Ceiling()
        {
            BigInteger numeratorCeiling = this.numerator < 0
                ? this.numerator
                    - BigInteger.Remainder(this.numerator, this.denominator)
                : this.numerator
                    + this.denominator
                    - BigInteger.Remainder(this.numerator, this.denominator);

            return new BigFloat(numeratorCeiling, this.denominator).Simplify();
        }

        /// <summary>
        /// The returns the largest integgral value that is less than or equal
        /// to this <see cref="BigFloat"/> value.
        /// </summary>
        /// <returns>
        /// The largest integral value that is less than or equal to this
        /// value. Note that this method returns a <see cref="BigFloat"/>
        /// instead of an integral type.
        /// </returns>
        public BigFloat Floor()
        {
            BigInteger floorNumerator = this.numerator < 0
                ? this.numerator
                    + this.denominator
                    - BigInteger.Remainder(this.numerator, this.denominator)
                : this.numerator
                - BigInteger.Remainder(this.numerator, this.denominator);

            return new BigFloat(floorNumerator, this.denominator).Simplify();
        }

        /// <summary>
        /// Rounds this <see cref="BigFloat"/> value to the nearest integral value.
        /// </summary>
        /// <returns>
        /// The integral vaue nearest this value. If the fractional component
        /// of this is halfway between two integers, one of which is even and
        /// the other odd, then the even number is returned. Note that this
        /// method returns a <see cref="BigFloat"/> instead of an integral
        /// type.
        /// </returns>
        public BigFloat Round() 
        {
            //get remainder. Over divisor see if it is > new BigFloat(0.5)
            BigFloat value = BigFloat.Decimals(this);

            return value.CompareTo(OneHalf) >= 0 ? this.Ceiling() : this.Floor();
        }

        /// <summary>
        /// Calculates the integral part of this <see cref="BigFloat"/> value.
        /// </summary>
        /// <returns>
        /// The integral part of this; that is, the number that
        /// remains after any fractional digits have been discarded.
        /// </returns>
        public BigFloat Truncate()
        {
            BigInteger truncatedNumerator = this.numerator
                - BigInteger.Remainder(this.numerator, this.denominator);

            return new BigFloat(truncatedNumerator, this.denominator).Simplify();
        }

        /// <summary>
        /// Calculates the fractional part of this <see cref="BigFloat"/>
        /// value.
        /// </summary>
        /// <returns>The fractional part of this value.</returns>
        public BigFloat Decimals()
        {
            BigInteger result = BigInteger
                .Remainder(this.numerator, this.denominator);

            return new BigFloat(result, this.denominator);
        }

        /// <summary>
        /// Shift the decimal point of this <see cref="BigFloat"/> value to the
        /// left by <paramref name="shift"/> number of decimal places.
        /// </summary>
        /// <param name="shift">
        /// Number of decimal places to shift the decimal point to the left.
        /// </param>
        /// <returns>
        /// The result of shifting this <see cref="BigFloat"/> value by
        /// <paramref name="shift"/> number of decimal places to the left.
        /// </returns>
        public BigFloat ShiftDecimalLeft(int shift)
        {
            if (shift < 0)
            {
                return ShiftDecimalRight(-shift);
            }

            BigInteger shiftedNumerator
                = this.numerator * BigInteger.Pow(10,shift);

            return new BigFloat(shiftedNumerator, this.denominator);
        }

        /// <summary>
        /// Shift the decimal point of this <see cref="BigFloat"/> value to the
        /// right by <paramref name="shift"/> number of decimal places.
        /// </summary>
        /// <param name="shift">
        /// Number of decimal places to shift the decimal point to the right.
        /// </param>
        /// <returns>
        /// The result of shifting this <see cref="BigFloat"/> value by
        /// <paramref name="shift"/> number of decimal places to the right.
        /// </returns>
        public BigFloat ShiftDecimalRight(int shift)
        {
            if (shift < 0)
            {
                return ShiftDecimalLeft(-shift);
            }

            BigInteger shiftedDenominator =
                this.denominator * BigInteger.Pow(10, shift);

            return new BigFloat(this.numerator, shiftedDenominator);
        }

        // TODO: Test for edge cases and add to documentation.
        /// <summary>
        /// Returns the square root of this <see cref="BigFloat"/> value.
        /// </summary>
        /// <returns>
        /// The square root of this value.
        /// </returns>
        public double SquareRoot()
        {
            return Math.Pow(10, BigInteger.Log10(this.numerator) / 2)
                / Math.Pow(10, BigInteger.Log10(this.denominator) / 2);
        }

        /// <summary>
        /// Returns the base 10 logarithm of this <see cref="BigFloat"/> value.
        /// </summary>
        /// <returns>
        /// The base 10 logarithm of this value; that is, log 10(this value).
        /// </returns>
        public double Log10()
        {
            return BigInteger.Log10(this.numerator)
                - BigInteger.Log10(this.denominator);
        }

        /// <summary>
        /// Returns the natural (base e) logarithm of this
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <returns>
        /// The natural (base e) logarithm of this <see cref="BigFloat"/>
        /// value.
        /// </returns>
        public double Log()
        {
            return BigInteger.Log(this.numerator)
                - BigInteger.Log(this.denominator);
        }

        /// <summary>
        /// Returns the <paramref name="base"/> logarithm of this <see
        /// cref="BigFloat"/> value.
        /// </summary>
        /// <param name="base">The base of the logarithm</param>
        /// <returns>
        /// The <paramref name="base"/> logarithm of this <see
        /// cref="BigFloat"/> value.
        /// </returns>
        public double Log(double @base)
        {
            return BigInteger.Log(this.numerator, @base)
                - BigInteger.Log(this.numerator, @base);
        }

        /// <summary>
        /// Converts the numeric value of the current <see cref="BigFloat"/>
        /// object to its equivalent <see cref="string"/> representation in
        /// decimal format up to <see cref="DefaultPrecision"/> precision.
        /// </summary>
        /// <returns>
        /// The string representation of the current <see cref="BigFloat"/>
        /// value.
        /// </returns>
        public override string ToString()
        {
            return ToString(DefaultPrecision);
        }

        /// <summary>
        /// Converts the numeric value of the current <see cref="BigFloat"/>
        /// object to its equivalent <see cref="string"/> representation in
        /// decimal format.
        /// </summary>
        /// <param name="precision"></param>
        /// <param name="trailingZeros"></param>
        /// <returns>The string representation of the current <see
        /// cref="BigFloat"/> value.</returns>
        public string ToString(int precision, bool trailingZeros = false) 
        {
            BigFloat simplified = Simplify();

            return simplified.SignString
                + simplified.GetUnitString(out BigInteger remainder)
                + simplified.GetDecimalString(remainder, trailingZeros)
                + simplified.GetMantissaString(precision, trailingZeros);
        }

        /// <summary>
        /// Converts the numeric value of the current <see cref="BigFloat"/>
        /// object to its equivalent <see cref="string"/> representation in
        /// mixed fraction format.
        /// </summary>
        /// <returns>The string representation of the current <see
        /// cref="BigFloat"/> value.</returns>
        public string ToMixString()
        {
            BigFloat factoredSelf = Simplify();

            BigInteger quotient = BigInteger
                .DivRem(
                    factoredSelf.numerator,
                    factoredSelf.denominator,
                    out BigInteger remainder);

            return remainder == 0
                ? quotient.ToString()
                : quotient + ", " + remainder + "/" + factoredSelf.denominator;
        }

        /// <summary>
        /// Converts the numeric value of the current <see cref="BigFloat"/>
        /// object to its equivalent <see cref="string"/> representation in
        /// simplified fraction format.
        /// </summary>
        /// <returns>The string representation of the current <see
        /// cref="BigFloat"/> value.</returns>
        public string ToRationalString()
        {
            BigFloat factoredSelf = Simplify();

            return factoredSelf.numerator + "/" + factoredSelf.denominator;
        }

        /// <summary>
        /// Compares two <see cref="BigFloat"/> values and returns the <see
        /// cref="int"/> that indicates whether the first value is less than,
        /// equal, or greater than the second value.
        /// </summary>
        /// <param name="other">The other vaue to compare to.</param>
        /// <returns>
        /// A signed integer that indicates the relative values of left and
        /// right, as shown in the following table. Value Condition Less than
        /// zero left is less than right. Zero left equals right. Greater than
        /// zero left is greater than right.
        /// </returns>
        public int CompareTo(BigFloat other)
        {
            // Cross multiply
            BigInteger one = this.numerator * other.denominator;
            BigInteger two = other.numerator * this.denominator;

            // Test
            return BigInteger.Compare(one, two);
        }

        /// <summary>
        /// Compares this <see cref="BigFloat"/> object to <paramref
        /// name="other"/> and returns an <see cref="int"/> that indicates
        /// whether the value of this object is less than, equal to, or greater
        /// than the value of <paramref name="other"/>.
        /// </summary>
        /// <param name="other">The object to compare.</param>
        /// <returns>
        /// A signed <see cref="int"/> that indicates the relationship of the
        /// current object to the <paramref name="other"/> parameter. If the
        /// return value is less than zero, the current object is less than
        /// <paramref name="other"/>. If the return value is zero, the current
        /// object equals <paramref name="other"/>. If the return value is
        /// greater than zero, the current object is greater than <paramref
        /// name="other"/> or <paramref name="other"/> is null.
        /// </returns>
        public int CompareTo(object other)
        {
            if (other == null)
            {
                throw new ArgumentNullException("other");
            }

            if (!(other is BigFloat))
            {
                throw new ArgumentException("other is not a BigFloat");
            }

            return CompareTo((BigFloat)other);
        }

        /// <summary>
        /// Returns a value that indicates whether the current object and
        /// <paramref name="other"/> have the same value.
        /// </summary>
        /// <param name="other">The compare to compare.</param>
        /// <returns>
        /// true if the <paramref name="other"/> argument is a <see
        /// cref="BigFloat"/>, and its value is equal to the value of the
        /// current <see cref="BigFloat"/> object; otherwise false.
        /// </returns>
        public override bool Equals(object other)
        {
            // Cannot use 'other as BigFloat' since BigFloat is a non-nullable type.
            // Explicit casting to BigFloat will not work if other is not already a BigFloat.
            // Must explicitly cast to other type first, and then that can be
            // implicitly cast to a BigFloat.
            // Due to the use of exceptions, this is very expensive to do,
            // which is why it is not recommended to directly compare with objects.

            // This will need refactoring.
            try
            {
                return this.Equals((BigFloat)other);
            }
            catch (Exception)
            {
                try
                {
                    return this.Equals((BigInteger)other);
                }
                catch (Exception)
                {
                    try
                    {
                        return this.Equals((BigFloat)(string)other);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            return this.Equals((double)other);
                        }
                        catch (Exception)
                        {
                            try
                            {
                                return this.Equals((float)other);
                            }
                            catch (Exception)
                            {
                                try
                                {
                                    return this.Equals((long)other);
                                }
                                catch (Exception)
                                {
                                    try
                                    {
                                        return this.Equals((int)other);
                                    }
                                    catch (Exception)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Returns a value that indicates whether the current object and a
        /// <paramref name="other"/> have the same value.
        /// </summary>
        /// <param name="other">The object to compare.</param>
        /// <returns>
        /// true if this <see cref="BigFloat"/> object and
        /// <paramref name="other"/> have the same value; otherwise, false.
        /// </returns>
        public bool Equals(BigFloat other)
        {
            return this == other;
        }

        /// <summary>
        /// Returns the hash code for the current <see cref="BigFloat"/>
        /// object.
        /// </summary>
        /// <returns>A 32-bit signed integer hash code.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region Static Methods

        /// <summary>
        /// Determines whether the specified object instances are considered equal.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>
        /// true if the objects are considered equal; otherwise, false. If both
        /// <paramref name="left"/> and <paramref name="right"/> are null, the
        /// method returns true.
        /// </returns>
        public static new bool Equals(object left, object right)
        {
            if (left == null && right == null)
            {
                return true;
            }
            if (left == null || right == null)
            {
                return false;
            }

            try
            {
                return ((BigFloat)left).Equals(right);
            }
            catch (Exception)
            {
                try
                {

                    return ((BigFloat)right).Equals(left);
                }
                catch (Exception)
                {
                    return object.Equals(left, right);
                }
            }
        }

        /// <summary>
        /// Converts the numeric value of <paramref name="value"/> to its
        /// equivalent <see cref="string"/> representation.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> value to convert.
        /// </param>
        /// <returns>
        /// The <see cref="string"/> representation of
        /// <paramref name="value"/>.
        /// </returns>
        public static string ToString(BigFloat value)
        {
            return value.ToString();
        }

        /// <summary>
        /// Switches the numerator and denominator of <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to invert.
        /// </param>
        /// <returns>
        /// The result of the inverting <paramref name="value"/>.
        /// </returns>
        public static BigFloat Inverse(BigFloat value)
        {
            return value.Inverse();
        }

        /// <summary>
        /// Decrements the value of <paramref name="value"/>. by 1.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to decrement.
        /// </param>
        /// <returns>
        /// The value of <paramref name="value"/> decremented by 1.
        /// </returns>
        public static BigFloat Decrement(BigFloat value)
        {
            return value.Decrement();
        }

        /// <summary>
        /// Negates the value of the <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to negate.
        /// </param>
        /// <returns>
        /// The result of <paramref name="value"/> multiplied by negative one
        /// (-1).
        /// </returns>
        public static BigFloat Negate(BigFloat value)
        {
            return value.Negate();
        }

        /// <summary>
        /// Increments the value the <paramref name="value"/> by 1.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to increment.
        /// </param>
        /// <returns>
        /// The value of <paramref name="value"/> incremented by 1.
        /// </returns>
        public static BigFloat Increment(BigFloat value)
        {
            return value.Increment();
        }

        /// <summary>
        /// Gets the absolute value of the <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to get the absolute value of.
        /// </param>
        /// <returns>The absolute value of <paramref name="value"/>.</returns>
        public static BigFloat AbsoluteValue(BigFloat value)
        {
            return value.AbsoluteValue();
        }

        /// <summary>
        /// Adds the values of two <see cref="BigFloat"/> objects and returns
        /// the result.
        /// </summary>
        /// <param name="leftAddend">The first value to add.</param>
        /// <param name="rightAddend">The second value to add.</param>
        /// <returns>
        /// The sum of <paramref name="leftAddend"/> and
        /// <paramref name="rightAddend"/>.
        /// </returns>
        public static BigFloat Add(
            BigFloat leftAddend,
            BigFloat rightAddend)
        {
            return leftAddend.Add(rightAddend);
        }

        /// <summary>
        /// Subtracts <paramref name="subtrahend"/> from
        /// <paramref name="minuend"/> and returns the result.
        /// </summary>
        /// <param name="minuend">The value to subtract from.</param>
        /// <param name="subtrahend">The value to subtract by.</param>
        /// <returns>
        /// The difference between <paramref name="minuend"/> and
        /// <paramref name="subtrahend"/>.
        /// </returns>
        public static BigFloat Subtract(
            BigFloat minuend,
            BigFloat subtrahend)
        {
            return minuend.Subtract(subtrahend);
        }

        /// <summary>
        /// Multiplies <paramref name="multiplicand"/> by
        /// <paramref name="multiplier"/> and returns the result.
        /// </summary>
        /// <param name="multiplicand">The multiplicand.</param>
        /// <param name="multiplier">The multiplier.</param>
        /// <returns>
        /// The product of <paramref name="multiplicand"/> and
        /// <paramref name="multiplier"/>.
        /// </returns>
        public static BigFloat Multiply(
            BigFloat multiplicand,
            BigFloat multiplier)
        {
            return multiplicand.Multiply(multiplier);
        }

        /// <summary>
        /// Divides <paramref name="dividend"/> by <paramref name="divisor"/>
        /// and returns the result.
        /// </summary>
        /// <param name="dividend">The value to be divided.</param>
        /// <param name="divisor">The value to divide by.</param>
        /// <returns>The quotient of the division.</returns>
        public static BigFloat Divide(
            BigFloat dividend,
            BigFloat divisor)
        {
            return dividend.Divide(divisor);
        }

        /// <summary>
        /// Raises <paramref name="base"/> to the power of
        /// <paramref name="exponent"/>.
        /// </summary>
        /// <param name="base">
        /// The value to be raised to the power of <paramref name="exponent"/>.
        /// </param>
        /// <param name="exponent">
        /// The exponent to raise <paramref name="base"/>'s value by.
        /// </param>
        /// <returns>
        /// The result of raising <paramref name="base"/> to the power of
        /// <paramref name="exponent"/>.
        /// </returns>
        public static BigFloat PowerTo(
            BigFloat @base,
            int exponent)
        {
            return @base.PowerTo(exponent);
        }

        /// <summary>
        /// Performs integer division on <paramref name="dividend"/> by
        /// <paramref name="divisor"/> and returns the remainder.
        /// </summary>
        /// <param name="dividend">The value to be divided.</param>
        /// <param name="divisor">The value to divide by.</param>
        /// <returns>
        /// The remainder after dividing <paramref name="dividend"/> by
        /// <paramref name="divisor"/>.
        /// </returns>
        public static BigFloat Remainder(
            BigFloat dividend,
            BigFloat divisor)
        {
            return dividend.Remainder(divisor);
        }

        /// <summary>
        /// Performs integer division on <paramref name="dividend"/> by
        /// <paramref name="divisor"/> and returns the quotient and remainder.
        /// </summary>
        /// <param name="dividend">The value to be divided.</param>
        /// <param name="divisor">The value to divide by.</param>
        /// <param name="remainder">The remainder.</param>
        /// <returns>
        /// The quotient after dividing <paramref name="dividend"/>
        /// by <paramref name="divisor"/>.
        /// </returns>
        public static BigFloat DivideRemainder(
            BigFloat dividend,
            BigFloat divisor,
            out BigFloat remainder)
        {
            return dividend.DivideRemainder(divisor, out remainder);
        }

        /// <summary>
        /// Calculates the fractional part of <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The value to obtain the fractional part.
        /// </param>
        /// <returns>The fractional part of <paramref name="value"/>.</returns>
        public static BigFloat Decimals(BigFloat value)
        {
            return value.Decimals();
        }

        /// <summary>
        /// Calculates the integral part of <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to truncate.</param>
        /// <returns>
        /// The integral part of <paramref name="value"/>; that is, the number
        /// that remains after any fractional digits have been discarded.
        /// </returns>
        public static BigFloat Truncate(BigFloat value)
        {
            return value.Truncate();
        }

        /// <summary>
        /// Returns the smallest integral value that is greater than or equal
        /// to <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to get the ceiling of.</param>
        /// <returns>
        /// The smallest integral value that is greater than or equal
        /// to <paramref name="value"/>. Note that this method returns a
        /// <see cref="BigFloat"/> instead of an integral type.
        /// </returns>
        public static BigFloat Ceiling(BigFloat value)
        {
            return value.Ceiling();
        }

        /// <summary>
        /// Returns the largest integral value that is less thanor equal to
        /// <paramref name="value"/>.
        /// </summary>
        /// <param name="value">The value to get the floor of.</param>
        /// <returns>
        /// The largest integral vaue that less than or equal to
        /// <paramref name="value"/>. Note that this method returns a
        /// <see cref="BigFloat"/> instead of an integral type.
        /// </returns>
        public static BigFloat Floor(BigFloat value)
        {
            return value.Floor();
        }

        /// <summary>
        /// Rounds <paramref name="value"/> to the nearest integral value.
        /// </summary>
        /// <param name="value">The value to round.</param>
        /// <returns>
        /// The integral value nearest this value. If the fractional component
        /// of <paramref name="value"/> is halfway between two integers, one of
        /// which is even and the other odd, then the even number is returned.
        /// Note that this methods returns a <see cref="BigFloat"/> instead of
        /// an integral type.
        /// </returns>
        public static BigFloat Round(BigFloat value)
        {
            return value.Round();
        }

        /// <summary>
        /// Converts the <see cref="string"/> representation of
        /// <paramref name="value"/> to its <see cref="BigFloat"/> equivalent.
        /// </summary>
        /// <param name="value">
        /// A <see cref="string"/> that contains the number to convert.
        /// </param>
        /// <returns>
        /// A value that is equivalent to <paramref name="value"/>.
        /// </returns>
        public static BigFloat Parse(string value) 
        {
            if (value == null)
            {
                throw new ArgumentNullException("value");
            }

            value.Trim();
            value = value.Replace(",", "");
            int pos = value.IndexOf('.');
            value = value.Replace(".", "");

            if (pos < 0)
            {
                //no decimal point
                return new BigFloat(BigInteger.Parse(value)).Simplify();
            }
            //decimal point (length - pos - 1)
            BigInteger numerator = BigInteger.Parse(value);
            BigInteger denominator = BigInteger.Pow(10, value.Length - pos);

            return new BigFloat(numerator, denominator).Simplify();
        }

        /// <summary>
        /// Shift the decimal point of <paramref name="value"/> to the left by
        /// <paramref name="shift"/> number of decimal places.
        /// </summary>
        /// <param name="value">The value to be shifted.</param>
        /// <param name="shift">
        /// The number of decimal places to shift the decimal point to the left.
        /// </param>
        /// <returns>
        /// The result of shifting <paramref name="value"/> by <paramref
        /// name="shift"/> number of decimal places to the left.
        /// </returns>
        public static BigFloat ShiftDecimalLeft(BigFloat value, int shift)
        {
            return value.ShiftDecimalLeft(shift);
        }

        /// <summary>
        /// Shift the decimal point of <paramref name="value"/> to the right by
        /// <paramref name="shift"/> number of decimal places.
        /// </summary>
        /// <param name="value">The value to be shifted.</param>
        /// <param name="shift">
        /// The number of decimal places to shift the decimal point to the right.
        /// </param>
        /// <returns>
        /// The result of shifting <paramref name="value"/> by <paramref
        /// name="shift"/> number of decimal places to the right.
        /// </returns>
        public static BigFloat ShiftDecimalRight(BigFloat value, int shift)
        {
            return value.ShiftDecimalRight(shift);
        }

        /// <summary>
        /// Tries to convert the <see cref="string"/> representation of
        /// <paramref name="value"/> to its <see cref="BigFloat"/> equivalent,
        /// and returns a value that indicates whether the conversion
        /// succeeded.
        /// </summary>
        /// <param name="value">
        /// The <see cref="string"/> representation of a number.
        /// </param>
        /// <param name="result">
        /// When this method returns, contains the <see cref="BigFloat"/>
        /// equivalent to the number that is contained in
        /// <paramref name="value"/>, or zero (0) if the conversion fails.
        /// The conversion fails if <paramref name="value"/> is null or is not
        /// of the correct format. This parameter is passed unitialized.
        /// </param>
        /// <returns>
        /// true if <paramref name="value"/> was covnerted successfully;
        /// otherwise, false.
        /// </returns>
        public static bool TryParse(string value, out BigFloat result) 
        {
            try
            {
                result = BigFloat.Parse(value);
                return true;
            }
            catch (ArgumentNullException)
            {
                result = Zero;
                return false;
            }
            catch (FormatException)
            {
                result = Zero;
                return false;
            }
        }

        /// <summary>
        /// Compares <paramref name="left"/> to <paramref name="right"/> and
        /// returns the <see cref="int"/> that indicates whether the first
        /// value is less than, equal, or greater than the second value.
        /// </summary>
        /// <param name="left">The first vaue to compare.</param>
        /// <param name="right">The second vaue to compare.</param>
        /// <returns>
        /// A signed integer that indicates the relative values of left and
        /// right, as shown in the following table. Value Condition Less than
        /// zero left is less than right. Zero left equals right. Greater than
        /// zero left is greater than right.
        /// </returns>
        public static int Compare(BigFloat left, BigFloat right)
        {
            return left.CompareTo(right);
        }

        /// <summary>
        /// Returns the base 10 logarithm of <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// A number whose logarithm is to be found.
        /// </param>
        /// <returns>
        /// The base 10 logarithm of <paramref name="value"/>.
        /// </returns>
        public static double Log10(BigFloat value)
        {
            return value.Log10();
        }

        /// <summary>
        /// Returns the natural (base e) logarithm of <paramref name="value"/>.
        /// </summary>
        /// <returns>
        /// The natural (base e) logarithm of <paramref name="value"/>.
        /// </returns>
        public static double Log(BigFloat value)
        {
            return value.Log();
        }

        /// <summary>
        /// Returns the logarithm of <paramref name="value"/> with a base of
        /// <paramref name="base"/>.
        /// </summary>
        /// <param name="value">
        /// A number whose logarithm is to be found.
        /// </param>
        /// <param name="base">The base of the logarithm.</param>
        /// <returns>
        /// The base <paramref name="base"/> logarithm of
        /// <paramref name="value"/>.
        /// </returns>
        public static double Log(BigFloat value, double @base)
        {
            return value.Log(@base);
        }

        /// <summary>
        /// Returns the square root of <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The number whose square root is to be found.
        /// </param>
        /// <returns>The square root of <paramref name="value"/>.</returns>
        public static double SquareRoot(BigFloat value)
        {
            return value.SquareRoot();
        }

        #endregion

        #region Operators

        /// <summary>
        /// Negates the value of the <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to negate.
        /// </param>
        /// <returns>
        /// The result of <paramref name="value"/> multiplied by negative one
        /// (-1).
        /// </returns>
        public static BigFloat operator -(BigFloat value)
        {
            return value.Negate();
        }

        /// <summary>
        /// Subtracts <paramref name="subtrahend"/> from
        /// <paramref name="minuend"/> and returns the result.
        /// </summary>
        /// <param name="minuend">The value to subtract from.</param>
        /// <param name="subtrahend">The value to subtract by.</param>
        /// <returns>
        /// The difference between <paramref name="minuend"/> and
        /// <paramref name="subtrahend"/>.
        /// </returns>
        public static BigFloat operator -(
            BigFloat minuend,
            BigFloat subtrahend)
        {
            return minuend.Subtract(subtrahend);
        }

        /// <summary>
        /// Decrements the value of <paramref name="value"/>. by 1.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to decrement.
        /// </param>
        /// <returns>
        /// The value of <paramref name="value"/> decremented by 1.
        /// </returns>
        public static BigFloat operator --(BigFloat value)
        {
            return value.Decrement();
        }

        /// <summary>
        /// Adds the values of two <see cref="BigFloat"/> objects and returns
        /// the result.
        /// </summary>
        /// <param name="leftAddend">The first value to add.</param>
        /// <param name="rightAddend">The second value to add.</param>
        /// <returns>
        /// The sum of <paramref name="leftAddend"/> and
        /// <paramref name="rightAddend"/>.
        /// </returns>
        public static BigFloat operator +(
            BigFloat leftAddend,
            BigFloat rightAddend)
        {
            return leftAddend.Add(rightAddend);
        }

        /// <summary>
        /// Gets the absolute value of the <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to get the absolute value of.
        /// </param>
        /// <returns>The absolute value of <paramref name="value"/>.</returns>
        public static BigFloat operator +(BigFloat value)
        {
            return value.AbsoluteValue();
        }

        /// <summary>
        /// Increments the value the <paramref name="value"/> by 1.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to increment.
        /// </param>
        /// <returns>
        /// The value of <paramref name="value"/> incremented by 1.
        /// </returns>
        public static BigFloat operator ++(BigFloat value)
        {
            return value.Increment();
        }

        /// <summary>
        /// Performs integer division on <paramref name="dividend"/> by
        /// <paramref name="divisor"/> and returns the remainder.
        /// </summary>
        /// <param name="dividend">The value to be divided.</param>
        /// <param name="divisor">The value to divide by.</param>
        /// <returns>
        /// The remainder after dividing <paramref name="dividend"/> by
        /// <paramref name="divisor"/>.
        /// </returns>
        public static BigFloat operator %(
            BigFloat dividend,
            BigFloat divisor)
        {
            return dividend.Remainder(divisor);
        }

        /// <summary>
        /// Multiplies <paramref name="multiplicand"/> by
        /// <paramref name="multiplier"/> and returns the result.
        /// </summary>
        /// <param name="multiplicand">The multiplicand.</param>
        /// <param name="multiplier">The multiplier.</param>
        /// <returns>
        /// The product of <paramref name="multiplicand"/> and
        /// <paramref name="multiplier"/>.
        /// </returns>
        public static BigFloat operator *(
            BigFloat multiplicand,
            BigFloat multiplier)
        {
            return multiplicand.Multiply(multiplier);
        }

        /// <summary>
        /// Divides <paramref name="dividend"/> by <paramref name="divisor"/>
        /// and returns the result.
        /// </summary>
        /// <param name="dividend">The value to be divided.</param>
        /// <param name="divisor">The value to divide by.</param>
        /// <returns>The quotient of the division.</returns>
        public static BigFloat operator /(BigFloat dividend, BigFloat divisor)
        {
            return dividend.Divide(divisor);
        }

        // TODO: Change to bitwise shift
        /// <summary>
        /// Shift the decimal point of <paramref name="value"/> to the right by
        /// <paramref name="shift"/> number of decimal places.
        /// </summary>
        /// <param name="value">The value to be shifted.</param>
        /// <param name="shift">
        /// The number of decimal places to shift the decimal point to the right.
        /// </param>
        /// <returns>
        /// The result of shifting <paramref name="value"/> by <paramref
        /// name="shift"/> number of decimal places to the right.
        /// </returns>
        public static BigFloat operator >>(BigFloat value, int shift)
        {
            return value.ShiftDecimalRight(shift);
        }

        // TODO: Change to bitwise shift
        /// <summary>
        /// Shift the decimal point of <paramref name="value"/> to the left by
        /// <paramref name="shift"/> number of decimal places.
        /// </summary>
        /// <param name="value">The value to be shifted.</param>
        /// <param name="shift">
        /// The number of decimal places to shift the decimal point to the left.
        /// </param>
        /// <returns>
        /// The result of shifting <paramref name="value"/> by <paramref
        /// name="shift"/> number of decimal places to the left.
        /// </returns>
        public static BigFloat operator <<(BigFloat value, int shift)
        {
            return value.ShiftDecimalLeft(shift);
        }

        public static BigFloat operator ^(BigFloat left, int right)
        {
            return left.PowerTo(right);
        }

        // TODO: Change to bitwise one's complement
        /// <summary>
        /// Switches the numerator and denominator of <paramref name="value"/>.
        /// </summary>
        /// <param name="value">
        /// The <see cref="BigFloat"/> object to invert.
        /// </param>
        /// <returns>
        /// The result of the inverting <paramref name="value"/>.
        /// </returns>
        public static BigFloat operator ~(BigFloat value)
        {
            return value.Inverse();
        }

        /// <summary>
        /// Returns a value that indicates whether <paramref name="left"/> and
        /// <paramref name="right"/> have different values.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The seconed value to compare.</param>
        /// <returns>
        /// true if <paramref name="left"/> and <paramref name="right"/> are
        /// not equal; otherwise false.
        /// </returns>
        public static bool operator !=(BigFloat left, BigFloat right)
        {
            return Compare(left, right) != 0;
        }

        /// <summary>
        /// Returns a value that indicates whether <paramref name="left"/> and
        /// <paramref name="right"/> are equal.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The seconed value to compare.</param>
        /// <returns>
        /// true if <paramref name="left"/> and <paramref name="right"/> are
        /// equal; otherwise false.
        /// </returns>
        public static bool operator ==(BigFloat left, BigFloat right)
        {
            return Compare(left, right) == 0;
        }

        /// <summary>
        /// Returns a value that indicates whether <paramref name="left"/> is
        /// less than <paramref name="right"/>.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The seconed value to compare.</param>
        /// <returns>
        /// true if <paramref name="left"/> is less than
        /// <paramref name="right"/>; otherwise false.
        /// </returns>
        public static bool operator <(BigFloat left, BigFloat right)
        {
            return Compare(left, right) < 0;
        }

        /// <summary>
        /// Returns a value that indicates whether <paramref name="left"/> is
        /// less than or equal to <paramref name="right"/>.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The seconed value to compare.</param>
        /// <returns>
        /// true if <paramref name="left"/> is less than or equal to
        /// <paramref name="right"/>; otherwise false.
        /// </returns>
        public static bool operator <=(BigFloat left, BigFloat right)
        {
            return Compare(left, right) <= 0;
        }

        /// <summary>
        /// Returns a value that indicates whether <paramref name="left"/> is
        /// greater than <paramref name="right"/>.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The seconed value to compare.</param>
        /// <returns>
        /// true if <paramref name="left"/> is greater than
        /// <paramref name="right"/>; otherwise false.
        /// </returns>
        public static bool operator >(BigFloat left, BigFloat right)
        {
            return Compare(left, right) > 0;
        }

        /// <summary>
        /// Returns a value that indicates whether <paramref name="left"/> is
        /// greater than or equal to <paramref name="right"/>.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The seconed value to compare.</param>
        /// <returns>
        /// true if <paramref name="left"/> is greater than or equal to
        /// <paramref name="right"/>; otherwise false.
        /// </returns>
        public static bool operator >=(BigFloat left, BigFloat right)
        {
            return Compare(left, right) >= 0;
        }

        // TODO: Remove
        /// <summary>
        /// Returns a value that indicates whether <paramref name="value"/> is
        /// true.
        /// </summary>
        /// <param name="value">The value to check if true.</param>
        /// <returns>
        /// true if <paramref name="value"/> is not equal to zero (0);
        /// otherwise false.
        /// </returns>
        public static bool operator true(BigFloat value)
        {
            return value != 0;
        }

        // TODO: Remove
        /// <summary>
        /// Returns a value that indicates whether <paramref name="value"/> is
        /// false.
        /// </summary>
        /// <param name="value">The value to check if false.</param>
        /// <returns>
        /// true if <paramref name="value"/> is equal to zero (0); otherwise
        /// false.
        /// </returns>
        public static bool operator false(BigFloat value)
        {
            return value == 0;
        }

        /// <summary>
        /// Defines an explicit conversion of <paramref name="value"/> to a
        /// <see cref="decimal"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="decimal"/>.
        /// </param>
        public static explicit operator decimal(BigFloat value) 
        { 
            if (decimal.MinValue > value)
            {
                throw new OverflowException(
                    "value is less than System.decimal.MinValue.");
            }
            if (decimal.MaxValue < value)
            {
                throw new OverflowException(
                    "value is greater than System.decimal.MaxValue.");
            }

            return (decimal)value.numerator / (decimal)value.denominator;
        }

        /// <summary>
        /// Defines an explicit conversion of <paramref name="value"/> to a
        /// <see cref="double"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="double"/>.
        /// </param>
        public static explicit operator double(BigFloat value)
        {
            if (double.MinValue > value)
            {
                throw new OverflowException(
                    "value is less than System.double.MinValue.");
            }
            if (double.MaxValue < value)
            {
                throw new OverflowException(
                    "value is greater than System.double.MaxValue.");
            }

            return (double)value.numerator / (double)value.denominator;
        }

        /// <summary>
        /// Defines an explicit conversion of <paramref name="value"/> to a
        /// <see cref="float"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="float"/>.
        /// </param>
        public static explicit operator float(BigFloat value)
        {
            if (float.MinValue > value)
            {
                throw new OverflowException(
                    "value is less than System.float.MinValue.");
            }
            if (float.MaxValue < value)
            {
                throw new OverflowException(
                    "value is greater than System.float.MaxValue.");
            }

            return (float)value.numerator / (float)value.denominator;
        }

        #endregion

        #region Implicit Converions

        /// <summary>
        /// Defines an implicit conversion of an unsigned byte to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(byte value)
        {
            return new BigFloat((uint)value);
        }

        /// <summary>
        /// Defines an implicit conversion of a signed byte to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(sbyte value)
        {
            return new BigFloat((int)value);
        }

        /// <summary>
        /// Defines an implicit conversion of a signed 16-bit integer to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(short value)
        {
            return new BigFloat((int)value);
        }

        /// <summary>
        /// Defines an implicit conversion of an unsigned 16-bit integer to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(ushort value)
        {
            return new BigFloat((uint)value);
        }

        /// <summary>
        /// Defines an implicit conversion of a signed 32-bit integer to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(int value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of a signed 64-bit integer to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(long value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of a signed 32-bit integer to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(uint value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of an unsigned 64-bit integer to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(ulong value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of a <see cref="decimal"/> to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(decimal value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of a <see cref="double"/> to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(double value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of a <see cref="float"/> to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(float value)
        {
            return new BigFloat(value);
        }

        /// <summary>
        /// Defines an implicit conversion of a <see cref="BigFloat"/> to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static implicit operator BigFloat(BigInteger value)
        {
            return new BigFloat(value);
        }

        #endregion

        #region Explicit Conversions

        /// <summary>
        /// Defines an explicit conversion of a <see cref="string"/> to a
        /// <see cref="BigFloat"/> value.
        /// </summary>
        /// <param name="value">
        /// The value to convert to a <see cref="BigFloat"/>.
        /// </param>
        public static explicit operator BigFloat(string value)
        {
            return new BigFloat(value);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Simplify the <see cref="numerator"/> and <see cref="denominator"/>.
        /// </summary>
        /// <remarks>Factoring can be very slow.</remarks>
        /// <returns>A factored instance of this.</returns>
        public BigFloat Simplify()
        {
            // Avoid recalculating if already factored.
            if (this.Simplified)
            {
                return this;
            }

            // Find GCD of numerator and denominator
            BigInteger factor = BigInteger
                .GreatestCommonDivisor(
                    this.numerator,
                    this.denominator);

            // Simplify the sign such that if the fraction as a whole is:
            // - Negative, then only the numerator is negative.
            // - Positive, both numerator and denominators are positive.
            int numeratorSign = numerator.Sign * denominator.Sign;

            return new BigFloat(
                numerator: numeratorSign * BigInteger.Abs(this.numerator) / factor,
                denominator: BigInteger.Abs(this.denominator) / factor,
                simplified: true);
        }

        /// <summary>
        /// Get the digits left of the decimal point.
        /// </summary>
        /// <param name="remainder">
        /// The fractional component not included in the unit.
        /// </param>
        /// <returns>The integral component of this instance.</returns>
        private string GetUnitString(out BigInteger remainder)
        {
            return BigInteger
                .Abs(BigInteger.DivRem(
                    this.numerator,
                    this.denominator,
                    out remainder))
                .ToString();
        }

        /// <summary>
        /// The digits right of the decimal point.
        /// </summary>
        /// <param name="precision">The number of digits to include.</param>
        /// <param name="trailingZeros">
        /// true if trailing zeros should be included, else they will be
        /// stripped.
        /// </param>
        /// <returns>The fractional component of this instance.</returns>
        private string GetMantissaString(int precision, bool trailingZeros)
        {
            BigInteger decimals = BigInteger
                .Abs((this.numerator * BigInteger.Pow(10, precision))
                    / this.denominator);

            if (decimals == 0 && trailingZeros)
            {
                return "0";
            }
            else if (decimals == 0)
            {
                return string.Empty;
            }

            StringBuilder sb = new StringBuilder();


            // Add digits after and including first non-zero digit
            while (precision-- > 0 && decimals > 0)
            {
                sb.Append(decimals % 10);
                decimals /= 10;
            }

            // Add leading zeros.
            BigInteger absoluteNumerator = BigInteger.Abs(this.numerator);
            BigInteger denominatorCopy = this.denominator;

            denominatorCopy /= 10;
            denominatorCopy /= 10;

            while (denominatorCopy >= absoluteNumerator)
            {
                sb.Append(0);
                denominatorCopy /= 10;
            }

            string result = new string(sb.ToString().Reverse().ToArray());

            if (!trailingZeros)
            {
                result = result.TrimEnd(new char[] { '0' });
            }

            return result;
        }

        /// <summary>
        /// Optionally get the decimal point dividing the integral and
        /// fractional components of this instance. The presence of decimal
        /// point is determined by the value of the mantissa.
        /// </summary>
        /// <param name="remainder">The fractional component of this instance</param>
        /// <param name="trailingZeros">
        /// true if trailing zeros should be included, else they will be
        /// stripped.
        /// </param>
        /// <returns>
        /// A decimal if there is a non-zero fractional component;
        /// else <see cref="string.Empty"/>
        /// </returns>
        private string GetDecimalString(
            BigInteger remainder,
            bool trailingZeros)
        {
            return (remainder.IsZero && !trailingZeros)
                ? string.Empty
                : ".";
        }

        #endregion
    }

}